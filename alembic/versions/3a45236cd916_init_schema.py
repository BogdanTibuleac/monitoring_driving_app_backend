"""init schema

Revision ID: 3a45236cd916
Revises: 
Create Date: 2025-09-21 15:43:10.228446

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3a45236cd916'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dim_badge',
    sa.Column('badge_id', sa.Integer(), nullable=False),
    sa.Column('badge_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.PrimaryKeyConstraint('badge_id')
    )
    op.create_table('dim_driver',
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('license_type', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_table('dim_emergency_number',
    sa.Column('country_code', sqlmodel.sql.sqltypes.AutoString(length=5), nullable=False),
    sa.Column('country_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('ambulance_number', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('country_code')
    )
    op.create_table('dim_location',
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('road_type', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=True),
    sa.PrimaryKeyConstraint('location_id')
    )
    op.create_table('dim_time',
    sa.Column('time_id', sa.Integer(), nullable=False),
    sa.Column('date_value', sa.Date(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('day', sa.Integer(), nullable=False),
    sa.Column('hour', sa.Integer(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('time_id')
    )
    op.create_table('dim_vehicle',
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('make', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.PrimaryKeyConstraint('vehicle_id')
    )
    op.create_table('dim_contact',
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('relationship', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.PrimaryKeyConstraint('contact_id')
    )
    op.create_table('dim_emergency',
    sa.Column('emergency_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('auto_contact_enabled', sa.Boolean(), nullable=True),
    sa.Column('emergency_country_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('share_location', sa.Boolean(), nullable=True),
    sa.Column('share_medical_info', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['emergency_country_code'], ['dim_emergency_number.country_code'], ),
    sa.PrimaryKeyConstraint('emergency_id')
    )
    op.create_table('dim_medical',
    sa.Column('medical_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('blood_type', sqlmodel.sql.sqltypes.AutoString(length=5), nullable=True),
    sa.Column('insurance', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('allergies', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('medications', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('conditions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('instructions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.PrimaryKeyConstraint('medical_id')
    )
    op.create_table('dim_notification',
    sa.Column('notification_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('push_enabled', sa.Boolean(), nullable=True),
    sa.Column('sound_enabled', sa.Boolean(), nullable=True),
    sa.Column('vibration_enabled', sa.Boolean(), nullable=True),
    sa.Column('volume', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.PrimaryKeyConstraint('notification_id')
    )
    op.create_table('dim_privacy',
    sa.Column('privacy_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('data_sharing_mode', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('location_accuracy', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('local_caching', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.PrimaryKeyConstraint('privacy_id')
    )
    op.create_table('dim_settings',
    sa.Column('settings_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('detection_sensitivity', sa.Integer(), nullable=True),
    sa.Column('auto_sos_delay', sa.Integer(), nullable=True),
    sa.Column('accelerometer_enabled', sa.Boolean(), nullable=True),
    sa.Column('gyroscope_enabled', sa.Boolean(), nullable=True),
    sa.Column('gps_enabled', sa.Boolean(), nullable=True),
    sa.Column('microphone_enabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.PrimaryKeyConstraint('settings_id')
    )
    op.create_table('fact_gamification',
    sa.Column('gamelog_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('time_id', sa.Integer(), nullable=False),
    sa.Column('badge_id', sa.Integer(), nullable=True),
    sa.Column('score_change', sa.Integer(), nullable=True),
    sa.Column('streak_days', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['badge_id'], ['dim_badge.badge_id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['time_id'], ['dim_time.time_id'], ),
    sa.PrimaryKeyConstraint('gamelog_id')
    )
    op.create_table('fact_security',
    sa.Column('sec_id', sa.Integer(), nullable=False),
    sa.Column('time_id', sa.Integer(), nullable=False),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('signature_status', sa.Boolean(), nullable=True),
    sa.Column('hash_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['time_id'], ['dim_time.time_id'], ),
    sa.PrimaryKeyConstraint('sec_id')
    )
    op.create_table('fact_sos',
    sa.Column('sos_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('time_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('severity', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('signature_valid', sa.Boolean(), nullable=True),
    sa.Column('anomaly_score', sa.Float(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['dim_location.location_id'], ),
    sa.ForeignKeyConstraint(['time_id'], ['dim_time.time_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['dim_vehicle.vehicle_id'], ),
    sa.PrimaryKeyConstraint('sos_id')
    )
    op.create_table('fact_trip',
    sa.Column('trip_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('time_id', sa.Integer(), nullable=False),
    sa.Column('distance_km', sa.Float(), nullable=True),
    sa.Column('avg_speed', sa.Float(), nullable=True),
    sa.Column('harsh_events', sa.Integer(), nullable=True),
    sa.Column('eco_score', sa.Float(), nullable=True),
    sa.Column('safety_score', sa.Float(), nullable=True),
    sa.Column('trip_duration_sec', sa.Integer(), nullable=True),
    sa.Column('max_speed', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['time_id'], ['dim_time.time_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['dim_vehicle.vehicle_id'], ),
    sa.PrimaryKeyConstraint('trip_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('templateitem',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('body', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PUBLISHED', name='templatestatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='templateitem_pkey')
    )
    op.drop_table('fact_trip')
    op.drop_table('fact_sos')
    op.drop_table('fact_security')
    op.drop_table('fact_gamification')
    op.drop_table('dim_settings')
    op.drop_table('dim_privacy')
    op.drop_table('dim_notification')
    op.drop_table('dim_medical')
    op.drop_table('dim_emergency')
    op.drop_table('dim_contact')
    op.drop_table('dim_vehicle')
    op.drop_table('dim_time')
    op.drop_table('dim_location')
    op.drop_table('dim_emergency_number')
    op.drop_table('dim_driver')
    op.drop_table('dim_badge')
    # ### end Alembic commands ###
